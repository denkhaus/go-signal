package gosignal

import (
	"github.com/denkhaus/go-promise"
	"os"
	"os/signal"
)

type SignalHandlerFunc func(os.Signal)

///////////////////////////////////////////////////////////////////////////////////////////
// SignalHandler
///////////////////////////////////////////////////////////////////////////////////////////
type SignalHandler struct {
	intChan chan os.Signal
	pr      *promise.Promise
}

///////////////////////////////////////////////////////////////////////////////////////////
// maintainLoop
///////////////////////////////////////////////////////////////////////////////////////////
func (s *SignalHandler) maintainLoop() {
	signal.Notify(s.intChan, os.Interrupt)

	for {
		select {
		case signal := <-s.intChan:
			s.pr.Resolve(signal)
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
// NewSignalHandler
///////////////////////////////////////////////////////////////////////////////////////////
func ObserveInterrupt() *promise.Deferred {

	h := &SignalHandler{}
	h.intChan = make(chan os.Signal, 1)
	h.pr = promise.Q().Defer()

	go h.maintainLoop()
	return h.pr
}
